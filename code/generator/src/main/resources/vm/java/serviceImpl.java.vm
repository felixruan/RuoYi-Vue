package ${packageName}.service.impl;

import ${packageName}.domain.ro.${ClassName}RO;
import ${packageName}.domain.vo.${ClassName}VO;
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.service.I${ClassName}Service;
#if($table.sub)
import ${packageName}.domain.${subClassName};
import com.igg.common.utils.StringUtils;
import org.springframework.transaction.annotation.Transactional;
#end
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
#if($table.sub)
import java.util.ArrayList;
#end
import java.util.List;

/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}ServiceImpl implements I${ClassName}Service {

    @Resource
    private ${ClassName}Mapper ${className}Mapper;

    /**
     * 查询${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return ${functionName}
     */
    @Override
    public ${ClassName}VO select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField}) {
        return ${className}Mapper.select(${pkColumn.javaField});
    }

    /**
     * 查询${functionName}列表
     *
     * @param ${className}RO ${functionName}
     * @return ${functionName}
     */
    @Override
    public List<${ClassName}VO> select${ClassName}List(${ClassName}RO ${className}RO) {
        return ${className}Mapper.selectList(${className}RO);
    }

    /**
     * 新增${functionName}
     *
     * @param ${className}RO ${functionName}
     * @return 结果
     */
#if($table.sub)
    @Transactional
#end
    @Override
    public int insert${ClassName}(${ClassName}RO ${className}RO) {
#if($table.sub)
        int rows = ${className}Mapper.insert(${className}RO);
        insert${subClassName}(${className}RO);
        return rows;
#else
        return ${className}Mapper.insert(${className}RO);
#end
    }

    /**
     * 修改${functionName}
     *
     * @param ${className}RO ${functionName}
     * @return 结果
     */
#if($table.sub)
    @Transactional
#end
    @Override
    public int update${ClassName}(${ClassName}RO ${className}RO) {
#if($table.sub)
        ${className}Mapper.delete${subClassName}By${subTableFkClassName}(${className}RO.get${pkColumn.capJavaField}());
        insert${subClassName}(${className});
#end
        return ${className}Mapper.update(${className}RO);
    }

    /**
     * 删除${functionName}信息
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return 结果
     */
#if($table.sub)
    @Transactional
#end
    @Override
    public int delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField}) {
#if($table.sub)
        ${className}Mapper.delete${subClassName}By${subTableFkClassName}(${pkColumn.javaField});
#end
        return ${className}Mapper.deleteById(${pkColumn.javaField});
    }
#if($table.sub)

    /**
     * 新增${subTable.functionName}信息
     *
     * @param ${className} ${functionName}对象
     */
    public void insert${subClassName}(${ClassName} ${className}) {
        List<${subClassName}> ${subclassName}List = ${className}.get${subClassName}List();
        ${pkColumn.javaType} ${pkColumn.javaField} = ${className}.get${pkColumn.capJavaField}();
        if (StringUtils.isNotNull(${subclassName}List)) {
            List<${subClassName}> list = new ArrayList<>();
            for (${subClassName} ${subclassName} : ${subclassName}List) {
                ${subclassName}.set${subTableFkClassName}(${pkColumn.javaField});
                list.add(${subclassName});
            }
            if (list.size() > 0) {
                ${className}Mapper.batch${subClassName}(list);
            }
        }
    }
#end

    /**
     * 批量删除${functionName}
     *
     * @param ${pkColumn.javaField}s 需要删除的${functionName}主键
     * @return 结果
     */
        #if($table.sub)
        @Transactional
        #end
    @Override
    public int delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaType}[] ${pkColumn.javaField}s) {
        #if($table.sub)
                ${className}Mapper.delete${subClassName}By${subTableFkClassName}s(${pkColumn.javaField}s);
        #end
        return ${className}Mapper.deleteByIds(${pkColumn.javaField}s);
    }

}
